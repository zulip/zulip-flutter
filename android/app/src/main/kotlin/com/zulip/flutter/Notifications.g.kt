// Autogenerated from Pigeon (v25.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package com.zulip.flutter

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  return if (exception is FlutterError) {
    listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NotificationDataFromLaunch (
  /**
   * The raw payload that is attached to the notification,
   * holding the information required to carry out the navigation.
   *
   * See [NotificationHostApi.getNotificationDataFromLaunch].
   */
  val payload: Map<Any?, Any?>
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): NotificationDataFromLaunch {
      val payload = pigeonVar_list[0] as Map<Any?, Any?>
      return NotificationDataFromLaunch(payload)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      payload,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NotificationTapEvent (
  /**
   * The raw payload that is attached to the notification,
   * holding the information required to carry out the navigation.
   *
   * See [notificationTapEvents].
   */
  val payload: Map<Any?, Any?>
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): NotificationTapEvent {
      val payload = pigeonVar_list[0] as Map<Any?, Any?>
      return NotificationTapEvent(payload)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      payload,
    )
  }
}
private open class NotificationsPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NotificationDataFromLaunch.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NotificationTapEvent.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is NotificationDataFromLaunch -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is NotificationTapEvent -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

val NotificationsPigeonMethodCodec = StandardMethodCodec(NotificationsPigeonCodec());

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface NotificationHostApi {
  /**
   * Retrieves notification data if the app was launched by tapping on a notification.
   *
   * On iOS, this returns `launchOptions.remoteNotification`,
   * which is the raw APNs data dictionary
   * if the app launch was opened by a notification tap,
   * else null. See Apple doc:
   *   https://developer.apple.com/documentation/uikit/uiapplication/launchoptionskey/remotenotification
   *
   * On Android, this checks if the launch `intent` has the intent data uri
   * starting with `zulip://notification` and has the extras bundle containing
   * the notification open payload we set during creating the notification.
   * Either returns the payload we set in the extras bundle, or null if the
   * `intent` doesn't match the preconditions, meaning launch wasn't triggered
   * by a notification.
   */
  fun getNotificationDataFromLaunch(): NotificationDataFromLaunch?

  companion object {
    /** The codec used by NotificationHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      NotificationsPigeonCodec()
    }
    /** Sets up an instance of `NotificationHostApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: NotificationHostApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.zulip.NotificationHostApi.getNotificationDataFromLaunch$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getNotificationDataFromLaunch())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}

private class NotificationsPigeonStreamHandler<T>(
    val wrapper: NotificationsPigeonEventChannelWrapper<T>
) : EventChannel.StreamHandler {
  var pigeonSink: PigeonEventSink<T>? = null

  override fun onListen(p0: Any?, sink: EventChannel.EventSink) {
    pigeonSink = PigeonEventSink<T>(sink)
    wrapper.onListen(p0, pigeonSink!!)
  }

  override fun onCancel(p0: Any?) {
    pigeonSink = null
    wrapper.onCancel(p0)
  }
}

interface NotificationsPigeonEventChannelWrapper<T> {
  open fun onListen(p0: Any?, sink: PigeonEventSink<T>) {}

  open fun onCancel(p0: Any?) {}
}

class PigeonEventSink<T>(private val sink: EventChannel.EventSink) {
  fun success(value: T) {
    sink.success(value)
  }

  fun error(errorCode: String, errorMessage: String?, errorDetails: Any?) {
    sink.error(errorCode, errorMessage, errorDetails)
  }

  fun endOfStream() {
    sink.endOfStream()
  }
}
      
abstract class NotificationTapEventsStreamHandler : NotificationsPigeonEventChannelWrapper<NotificationTapEvent> {
  companion object {
    fun register(messenger: BinaryMessenger, streamHandler: NotificationTapEventsStreamHandler, instanceName: String = "") {
      var channelName: String = "dev.flutter.pigeon.zulip.NotificationEventChannelApi.notificationTapEvents"
      if (instanceName.isNotEmpty()) {
        channelName += ".$instanceName"
      }
      val internalStreamHandler = NotificationsPigeonStreamHandler<NotificationTapEvent>(streamHandler)
      EventChannel(messenger, channelName, NotificationsPigeonMethodCodec).setStreamHandler(internalStreamHandler)
    }
  }
}
      
