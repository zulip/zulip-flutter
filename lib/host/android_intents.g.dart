// Autogenerated from Pigeon (v26.0.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';
bool _deepEquals(Object? a, Object? b) {
  if (a is List && b is List) {
    return a.length == b.length &&
        a.indexed
        .every(((int, dynamic) item) => _deepEquals(item.$2, b[item.$1]));
  }
  if (a is Map && b is Map) {
    return a.length == b.length && a.entries.every((MapEntry<Object?, Object?> entry) =>
        (b as Map<Object?, Object?>).containsKey(entry.key) &&
        _deepEquals(entry.value, b[entry.key]));
  }
  return a == b;
}


class IntentSharedFile {
  IntentSharedFile({
    this.name,
    this.mimeType,
    required this.bytes,
  });

  String? name;

  String? mimeType;

  Uint8List bytes;

  List<Object?> _toList() {
    return <Object?>[
      name,
      mimeType,
      bytes,
    ];
  }

  Object encode() {
    return _toList();  }

  static IntentSharedFile decode(Object result) {
    result as List<Object?>;
    return IntentSharedFile(
      name: result[0] as String?,
      mimeType: result[1] as String?,
      bytes: result[2]! as Uint8List,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! IntentSharedFile || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

sealed class AndroidIntentEvent {
}

class AndroidIntentSendEvent extends AndroidIntentEvent {
  AndroidIntentSendEvent({
    required this.action,
    this.extraText,
    this.extraStream,
  });

  String action;

  String? extraText;

  List<IntentSharedFile>? extraStream;

  List<Object?> _toList() {
    return <Object?>[
      action,
      extraText,
      extraStream,
    ];
  }

  Object encode() {
    return _toList();  }

  static AndroidIntentSendEvent decode(Object result) {
    result as List<Object?>;
    return AndroidIntentSendEvent(
      action: result[0]! as String,
      extraText: result[1] as String?,
      extraStream: (result[2] as List<Object?>?)?.cast<IntentSharedFile>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! AndroidIntentSendEvent || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is IntentSharedFile) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    }    else if (value is AndroidIntentSendEvent) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        return IntentSharedFile.decode(readValue(buffer)!);
      case 130: 
        return AndroidIntentSendEvent.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

const StandardMethodCodec pigeonMethodCodec = StandardMethodCodec(_PigeonCodec());

Stream<AndroidIntentEvent> androidIntentEvents( {String instanceName = ''}) {
  if (instanceName.isNotEmpty) {
    instanceName = '.$instanceName';
  }
  final EventChannel androidIntentEventsChannel =
      EventChannel('dev.flutter.pigeon.zulip.AndroidIntentsEventChannelApi.androidIntentEvents$instanceName', pigeonMethodCodec);
  return androidIntentEventsChannel.receiveBroadcastStream().map((dynamic event) {
    return event as AndroidIntentEvent;
  });
}
    
