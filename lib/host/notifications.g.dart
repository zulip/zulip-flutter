// Autogenerated from Pigeon (v25.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

class NotificationDataFromLaunch {
  NotificationDataFromLaunch({
    required this.payload,
  });

  /// The raw payload that is attached to the notification,
  /// holding the information required to carry out the navigation.
  ///
  /// See [NotificationHostApi.getNotificationDataFromLaunch].
  Map<Object?, Object?> payload;

  Object encode() {
    return <Object?>[
      payload,
    ];
  }

  static NotificationDataFromLaunch decode(Object result) {
    result as List<Object?>;
    return NotificationDataFromLaunch(
      payload: (result[0] as Map<Object?, Object?>?)!.cast<Object?, Object?>(),
    );
  }
}

class NotificationTapEvent {
  NotificationTapEvent({
    required this.payload,
  });

  /// The raw payload that is attached to the notification,
  /// holding the information required to carry out the navigation.
  ///
  /// See [notificationTapEvents].
  Map<Object?, Object?> payload;

  Object encode() {
    return <Object?>[
      payload,
    ];
  }

  static NotificationTapEvent decode(Object result) {
    result as List<Object?>;
    return NotificationTapEvent(
      payload: (result[0] as Map<Object?, Object?>?)!.cast<Object?, Object?>(),
    );
  }
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is NotificationDataFromLaunch) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    }    else if (value is NotificationTapEvent) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        return NotificationDataFromLaunch.decode(readValue(buffer)!);
      case 130: 
        return NotificationTapEvent.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

const StandardMethodCodec pigeonMethodCodec = StandardMethodCodec(_PigeonCodec());

class NotificationHostApi {
  /// Constructor for [NotificationHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  NotificationHostApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  /// Retrieves notification data if the app was launched by tapping on a notification.
  ///
  /// On iOS, this returns `launchOptions.remoteNotification`,
  /// which is the raw APNs data dictionary
  /// if the app launch was opened by a notification tap,
  /// else null. See Apple doc:
  ///   https://developer.apple.com/documentation/uikit/uiapplication/launchoptionskey/remotenotification
  ///
  /// On Android, this checks if the launch `intent` has the intent data uri
  /// starting with `zulip://notification` and has the extras bundle containing
  /// the notification open payload we set during creating the notification.
  /// Either returns the payload we set in the extras bundle, or null if the
  /// `intent` doesn't match the preconditions, meaning launch wasn't triggered
  /// by a notification.
  Future<NotificationDataFromLaunch?> getNotificationDataFromLaunch() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.zulip.NotificationHostApi.getNotificationDataFromLaunch$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as NotificationDataFromLaunch?);
    }
  }
}

Stream<NotificationTapEvent> notificationTapEvents( {String instanceName = ''}) {
  if (instanceName.isNotEmpty) {
    instanceName = '.$instanceName';
  }
  final EventChannel notificationTapEventsChannel =
      EventChannel('dev.flutter.pigeon.zulip.NotificationEventChannelApi.notificationTapEvents$instanceName', pigeonMethodCodec);
  return notificationTapEventsChannel.receiveBroadcastStream().map((dynamic event) {
    return event as NotificationTapEvent;
  });
}
    
